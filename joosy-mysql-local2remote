#!/bin/bash
mkdir -p $JOOSYLOCALFOLDER/$TIMESTAMP/dump
mkdir -p $JOOSYLOCALFOLDER/$TIMESTAMP/2remote

echo "
MySQL sync direction is LOCAL($SRCDB@$SOURCEHOST) ==> REMOTE($TRGDB@$TARGETHOST)
"
echo "Retrieving local table names ..."
echo $SRCFILTERSQL > $JOOSYLOCALFOLDER/$TIMESTAMP/josh-tables-filter.sql

mysql -u  $(get source mysql-user) -h $(get source mysql-host) -p$(get source mysql-password) --skip-column-names information_schema < $JOOSYLOCALFOLDER/$TIMESTAMP/josh-tables-filter.sql > $JOOSYLOCALFOLDER/$TIMESTAMP/sourcetables.list
SRCMYSQLDUMP="mysqldump -u  $(get source mysql-user) -h $(get source mysql-host) -p$(get source mysql-password) --add-drop-table $(get source mysql-db) "	
SRCSKIPTABLES=$(get source mysql-skip)


if [[ $CREATEBACKUP == "yes" ]]; then
	echo "#!/bin/bash
	mkdir -p $TRGTMP/$TIMESTAMP/
	cd $TRGTMP/$TIMESTAMP/

	# make backup
	echo 'Backing up current database ...'
	echo \"$TRGFILTERSQL\" > ./josh-tables-filter.sql
	mkdir backup
	mysql -u  $(get target mysql-user) -h $(get target mysql-host) -p$(get target mysql-password) --skip-column-names information_schema < ./josh-tables-filter.sql > tablelist
	while read line; do
		mysqldump -u  $(get target mysql-user) -h $(get target mysql-host) -p$(get target mysql-password) --add-drop-table $(get target mysql-db) \$line > backup/\$line.sql
	done < tablelist
	tar zcf $TRGTMP/$TIMESTAMP/target.mysql.backup.tar.gz -C $TRGTMP/$TIMESTAMP/backup .
	rm -rf backup/
	echo 'OK'
	echo 'Updating database ...'
	cat dump/*.sql | mysql -u $(get target mysql-user) -h $(get target mysql-host) -p$(get target mysql-password) $(get target mysql-db)
	echo 'OK'
	" >> $JOOSYLOCALFOLDER/$TIMESTAMP/2remote/sqlimport.sh
else
	echo "#!/bin/bash
	cd $TRGTMP/$TIMESTAMP/

	echo 'Updating database ...'
	cat dump/*.sql | mysql -u $(get target mysql-user) -h $(get target mysql-host) -p$(get target mysql-password) $(get target mysql-db)
	echo 'OK'
	" >> $JOOSYLOCALFOLDER/$TIMESTAMP/2remote/sqlimport.sh
fi

echo "Dumping local data ..."
while read line; do
	checkline="${line#*_};"
	if grep -q $checkline <<<$SRCSKIPTABLES; then
		echo "Table $line will be skipped as specified in conf"
	else
		$SRCMYSQLDUMP $line > $JOOSYLOCALFOLDER/$TIMESTAMP/dump/${line#*_}.sql.tmp
		sed "s/$SRCMYSQLPREFIX/$TRGMYSQLPREFIX/g"  $JOOSYLOCALFOLDER/$TIMESTAMP/dump/${line#*_}.sql.tmp > $JOOSYLOCALFOLDER/$TIMESTAMP/dump/${line#*_}.sql
		rm -f $JOOSYLOCALFOLDER/$TIMESTAMP/dump/${line#*_}.sql.tmp
	fi		
done < $JOOSYLOCALFOLDER/$TIMESTAMP/sourcetables.list

tarname="$SOURCEHOST.${SRCMYSQLPREFIX%_*}.dump.tar.gz"
echo "Creating tar $tarname ..."
tar zcf $JOOSYLOCALFOLDER/$TIMESTAMP/2remote/$tarname -C $JOOSYLOCALFOLDER/$TIMESTAMP/dump/ .

echo "Sending to $TARGETHOST ..."
rsync -rzt $JOOSYLOCALFOLDER/$TIMESTAMP/2remote/* $(get target host-user)@$(get target host):$TRGTMP/$TIMESTAMP/

answer="n"
echo "Updating target database. Are you sure? [y/N]"
read answer
case "$answer" in
	"y" )
		SSH="ssh $(get target host-user)@$(get target host)"
		MKDIRS="mkdir -p $TRGTMP/$TIMESTAMP/dump/"
		UNTAR="tar zxf $TRGTMP/$TIMESTAMP/$tarname -C $TRGTMP/$TIMESTAMP/dump"
		SQLCOMMAND="sh $TRGTMP/$TIMESTAMP/sqlimport.sh"
		SSHCOMMAD="$SSH $MKDIRS && $UNTAR && $SQLCOMMAND"
		$SSHCOMMAD &> $JOOSYLOCALFOLDER/$TIMESTAMP/remote-update.log
		
		echo "Target database updated. This is the log file (may be empty)"
		echo "----------- START OF remote-update.log -----------
		"
		cat $JOOSYLOCALFOLDER/$TIMESTAMP/remote-update.log
		echo "
----------- END OF remote-update.log -----------"

		if [[ $CREATEBACKUP == "yes" ]]; then
			echo "Downloading database backup ..."
			scp $(get target host-user)@$(get target host):/$TARGETTMP/$TIMESTAMP/target.mysql.backup.tar.gz $JOOSYLOCALFOLDER/$TIMESTAMP/backup/target.mysql.backup.tar.gz
		fi
		;;
	* )
		echo "Ok. No changes on target database. Bye."
		exit 4
		;;
esac

